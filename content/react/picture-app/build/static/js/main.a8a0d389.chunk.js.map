{"version":3,"sources":["Components/Header/Header.js","Components/ImageBlock/Imageblock.js","Components/NavButton/Navbutton.js","Components/Buttons/Buttons.js","Components/Main/Main.js","Components/Loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["props","className","title","styles","el","marked","src","download_url","alt","id","author","onClick","onLikeClick","isActive","console","log","data-name","dataName","changeShowScreen","param","buttons","map","i","key","drawImageBlocks","stateItem","Buttons","isLoading","screenShow","apiData","favorites","App","btn","setState","state","concat","forEach","needItem","find","c","splice","push","axios","get","then","res","data","catch","error","Header","this","Loader","Main","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8a0d389.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default props => (\r\n  <header className=\"App-header\">\r\n    <h1>{props.title}</h1>\r\n  </header>\r\n)","import React from \"react\"\r\n\r\nexport default function(props) {\r\n  let styles = 'like-icon ';\r\n  //Если лайк есть - покрасить в красный\r\n  if (props.el.marked) {\r\n    styles += ' like-icon-red'\r\n  }\r\n  return <div className=\"main-content_block\">\r\n    <img className=\"main-content_img\"\r\n         src={props.el.download_url}\r\n         alt={'picture ' + props.el.id}/>\r\n    <div className=\"main-content_img_description\">\r\n      <div className=\"main-content_img_description_author\">\r\n        <h5>{props.el.author}</h5>\r\n      </div>\r\n      <div className=\"main-content_img_description_like\">\r\n        <span className={ styles } onClick={props.onLikeClick}>&#9829;</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}","import React from \"react\";\r\n\r\nexport default function(props) {\r\n  let styles = 'nav-button ';\r\n  //цвет активной кнопки\r\n  if (props) {\r\n    if (props.isActive) {\r\n      styles += ' active-button'\r\n    }\r\n  }\r\n  console.log(props);\r\n  return <div className={styles}\r\n              data-name={props.dataName}\r\n              onClick={() => props.changeShowScreen({props})} >\r\n    {props.title}\r\n  </div>\r\n}\r\n","import React from \"react\";\r\nimport Button from \"../NavButton/Navbutton\";\r\n\r\nexport default (props) => {\r\n  return (\r\n    <nav className=\"nav\">\r\n      {props.props.param.buttons.map((el, i) =>\r\n        <Button dataName={el.dataName}\r\n                title={el.title}\r\n                key={el.id}\r\n                isActive={props.props.param.buttons[i].isActive}\r\n                changeShowScreen={props.props.changeShowScreen}/>)\r\n      }\r\n    </nav>\r\n  )\r\n}","import React from \"react\";\r\n\r\nimport ImageBlock from '../ImageBlock/Imageblock';\r\nimport Buttons from '../Buttons/Buttons';\r\n\r\nexport default (props) => {\r\n  const drawImageBlocks = (stateItem) => {\r\n    return stateItem.map((el) =>\r\n      <ImageBlock el={el}\r\n                  key={el.id}\r\n                  onLikeClick={() => props.onLikeClick(el.id)}/>)\r\n\r\n  };\r\n\r\n  return (\r\n    <main className=\"App-main\">\r\n      { /* Рисуем кнопки */}\r\n      <Buttons props={props}/>\r\n\r\n      { /* По умолчанию - компонент с картинками */}\r\n      {!props.param.isLoading && props.param.screenShow === 'pictures' &&\r\n      <div className=\"main-pictures main-content\">\r\n        {drawImageBlocks(props.param.apiData)}\r\n      </div>}\r\n\r\n      { /*   При нажатии на кнопку - меняется на избранное */}\r\n      {!props.param.isLoading && props.param.screenShow === \"favorites\" &&\r\n      <div className=\"main-favorites main-content\">\r\n        {drawImageBlocks(props.param.favorites)}\r\n      </div>}\r\n\r\n    </main>\r\n  )\r\n}","import React from \"react\";\r\nimport './loader.css';\r\n\r\nexport default () => (\r\n  <div>\r\n    <h2>Loading...</h2>\r\n    <div className=\"lds-roller\">\r\n      <div/>\r\n      <div/>\r\n      <div/>\r\n      <div/>\r\n      <div/>\r\n      <div/>\r\n      <div/>\r\n      <div/>\r\n    </div>\r\n  </div>\r\n)\r\n","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\n//Components import\nimport Header from './Components/Header/Header';\nimport Main from './Components/Main/Main';\nimport Loader from './Components/Loader/Loader';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      screenShow: 'pictures',\n      apiData: [],\n      favorites: [],\n      buttons: [{id: 1, title: \"Pictures\", dataName: \"pictures\", isActive: true},\n        {id: 2, title: \"Favorites\", dataName: \"favorites\", isActive: false},]\n    }\n  }\n\n  componentDidMount() {\n    //получить данный с API\n    axios.get('https://picsum.photos/v2/list')\n      .then(res => {\n        this.setState({\n          apiData: this.state.apiData.concat(res.data),\n          isLoading: false,\n        });\n      })\n      .catch(error => console.log(error));\n  };\n\n  changeShowScreen = (btn) => {\n    //смена экрана (компонента) при нажатии на кнопку\n    this.setState({screenShow: btn.props.dataName});\n    //цвет активной кнопки\n    if (!btn.props.isActive) {\n      let buttons = this.state.buttons.concat();\n      buttons.forEach((el) => {\n        el.isActive = el.dataName === btn.props.dataName;\n      });\n      this.setState({buttons})\n    }\n  };\n\n  onLikeClick = (id) => {\n    //отслеживать клик на лайк, добавлять или удалять в Избранное\n    let apiData = this.state.apiData.concat();\n    let favorites = this.state.favorites.concat();\n    let needItem = apiData.find((c) => c.id === id);\n    if (needItem.marked) {\n      favorites.forEach((el, i) => {\n        if (el.id === needItem.id) {\n          favorites.splice(i, 1);\n        }\n      });\n      this.setState({favorites, apiData});\n      return needItem.marked = false;\n    }\n    needItem.marked = true;\n    favorites.push(needItem);\n    this.setState({favorites, apiData})\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header title=\"Choice your picture\"/>\n        { /* Сначала рендерится Loader, затем блок по умолчанию */}\n        {\n          this.state.isLoading ? <Loader/> : <Main param={this.state}\n                                                   changeShowScreen={this.changeShowScreen}\n                                                   onLikeClick={this.onLikeClick}/>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}